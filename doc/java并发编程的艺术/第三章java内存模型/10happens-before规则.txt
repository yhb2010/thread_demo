1、程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。
2、监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。
3、volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。
4、传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。
5、start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。
6、join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。

下面来看看start()规则。假设线程a在执行的过程中，通过执行ThreadB.strat()来启动线程b；同时，假设线程a在执行ThreadB.strat()之前修改了一些共享变量，
线程b在开始执行后会读这些共享变量。
		线程a						线程b
	1：修改共享变量
	2：执行ThreadB.strat()
								3：开始执行
								4：读共享变量
	1 happens-before 2由程序顺序规则产生。2 happens-before 4由start规则产生。根据传递性，将有1 happens-before 4。这意味着，线程a在执行
	ThreadB.strat()之前对共享变量所做的修改，接下来在线程b开始执行后都将确保对线程b可见。

下面来看看join()规则。假设线程a在执行的过程中，通过执行ThreadB.join()来等待线程b终止；同时，假设线程b在终止之前修改了一些共享变量，线程a从
ThreadB.join()返回后会读这些共享变量。
		线程a						线程b
	1：执行ThreadB.join()		2：写共享变量
								3：线程b终止
	4：从ThreadB.join()操作
	成功返回
	5：读共享变量
	2 happens-before 4由join规则产生；4 happens-before 5由程序顺序规则产生。根据传递性，将有2 happens-before 5.这意味着，线程a执行操作
	ThreadB.join()并成功返回后，线程b中的任意操作将对线程a可见。