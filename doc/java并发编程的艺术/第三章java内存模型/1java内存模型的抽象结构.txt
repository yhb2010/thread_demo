在java中，所有实例域、静态域、和数组元素都存储在堆内存中，堆内存在线程之间共享。局部变量、方法定义参数、和异常处理器参数不会在线程之间共享，他们不会有内存
可见性问题，也不受内存模型的影响。

java线程之间的通信由java内存模型控制JMM，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度看，JMM决定了线程和主内存之间的抽象关系：线程
之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了该线程以读/写共享变量的副本。本地内存时JMM的抽象概念，并不真实存在。

如果线程A要和线程b通信，必须经过：
	线程a把本地内存a中更新过的共享变量刷新到主内存中去。
	线程b到主内存中去读取线程a之前已更新过的共享变量。
	本地内存a和本地内存b由主内存中共享变量x的副本。假设开始时，这3个内存中的x值都为09。线程a在执行时，把更新后的x值（假设为1）临时放在自己的本地内存a中。
	当线程a和线程b需要通信时，线程a首先会把自己的本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程b到主内存中去读取线程a更新后的
	x值，此时线程b的本地内存的x值也变为了1.