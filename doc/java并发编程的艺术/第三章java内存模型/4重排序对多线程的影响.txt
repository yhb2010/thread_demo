class Example{
	int a = 0;
	boolean flag = false;

	public void write(){
		a = 1;//1
		flag = true;//2
	}

	public void reader(){
		if(flag){//3
			int i = a * a;//4
		}
	}
}
flag变量用于标识a是否已被写入，这里假设有两个线程a和b，a首先执行write方法，随后b执行reader方法，线程b在执行操作4时，能否看到线程a在操作1对共享变量a的写
入呢？
答案是不一定能看到。
由于操作1和操作2没有数据依赖性关系，编译器和处理器可以对这两个操作重排序；操作3和操作4没有数据依赖关系，也可以重排序。效果分别如下图所示：
	1、线程a				线程b
	   flag = true
	   					if(flag)
	   					int i = a* a
	   a = 1

	2、线程a				线程b
	   					temp = a * a
	   a = 1
	   flag = true
	   					if(flag)
	   					int i = temp
	在程序中，操作3和操作4存在控制依赖关系，当代码中存在控制依赖时，会影响指令序列执行的并行度。为此，编译器会采用猜测执行来克服控制依相关性对并行度的影响。
	以处理器的猜测执行为例，执行线程b的处理器可以提前读取并计算a*a，然后把计算结果临时保存到一个名为重排序缓冲的硬件缓存中。当操作3的条件判断满足时，把该
	计算结果写入变量i中。