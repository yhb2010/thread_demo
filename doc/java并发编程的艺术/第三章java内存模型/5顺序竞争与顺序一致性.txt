java中数据竞争的定义：
	在一个线程中写一个变量
	在另一个线程读同一个变量
	而且写和读没有通过同步来排序

当代码中存在数据竞争时，程序的执行往往产生违反直觉的结果，如果一个多线程程序能正确同步，这个程序就是一个没有数据竞争的程序。

jmm对正确同步的多线程程序的内存一致性做了如下保证：
	如果程序是正确同步的，程序的执行将具有顺序一致性————即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。这里的同步指的是广义上的同步，包括
	对常用同步原语的正确使用（synchronized、volatile、final）。

顺序一致性内存模型：
	顺序一致性内存模型是一个被计算机科学家理想化了的理论参考模型，它为程序员提供了极强的内存可见性保证。顺序一致性内存模型有两大特性：
	1、一个线程中的所有操作必须按照程序的顺序来执行。
	2、不管程序是否同步，所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见。

	在概念上，顺序一致性模型有一个单一的全局内存，这个内存通过一个左右摆动的开关可以连接到任意一个线程。同时每一个线程必须按照程序的顺序来执行内存读/写操
	作。在任意时间点最多只能有一个线程可以连接到内存。当多个线程并发执行时，开关装置能把所有线程的所有内存读/写操作串行化。

在jmm中没有这个保证。未同步程序在jmm中不但整体的执行顺序是无序的，而且所有线程看到的操作执行顺序也可能不一致。比如，在当前线程把写过的数据缓存在本地内存
中，在没有刷新到主内存之前，这个写操作仅对当前线程可见；从其它线程的角度观察，会认为这个写操作根本没有被当前线程执行。只有当前线程把本地内存中写过的数据刷
新到主内存后，这个写操作才能对其它线程可见。这种情况下，当前线程和其它线程看到的操作执行顺序将不一致。