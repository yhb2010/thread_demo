class volatileDemo{
	int a = 0;
	volatile boolean flag = false;

	public void writer(){
		a = 1;//1
		flag = true;//2
	}

	public void reader(){
		if(flag){//3
			int i = a;//4
		}
	}
}

线程a在写flag变量后，本地内存a中被线程a更新过的两个共享变量的值被刷新到主内存中，此时，本地内存a和主内存中共享变量的值是一样的。
当读一个volatile变量时，jmm会把该线程对应的本地内存置为无效，线程接下来将从主内存中读取共享变量。

1、当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。
2、当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。
3、当第一个操作是volatile写，第二个操作是volatile读时，不能重排序。

假设线程a执行writer()方法之后，线程b执行reader()方法。根据happens-before规则，这个过程建立的happens-before关系可以分为3类：
	1、根据程序次序规则，1 happens-before 2; 3 happens-before 4。
	2、根据volatile规则，2 happens-before 3。
	3、根据happens-before传递性，1 happens-before 4。

volatile底层的实现机制是什么？
	如果把加入volatile关键字的代码和未加入volatile关键字的代码都生成汇编代码，会发现加入volatile关键字的代码会多出一个lock前缀指令。 lock前缀指
	令实际相当于一个内存屏障，内存屏障提供了以下功能： 
	1.重排序时不能把后面的指令重排序到内存屏障之前的位置 
	2.使得本CPU的Cache写入内存
	3.写入动作也会引起别的CPU或者别的内核无效化其Cache，相当于让新写入的值对别的线程可见。