ThreadPoolExecutor执行execute方法分下面4种情况：
	1、如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）
	2、如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue
	3、如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执行这一步骤需要获取全局锁）
	4、如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将被拒绝，并调用RejectExecutionHandle.rejectedExecution()方法

创建一个线程池需要输入几个参数：
	1、corePoolSize线程池的基本大小：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行
	的任务数大于corePoolSize时就不会再创建。如果调用了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有基本线程。

	2、runnableTaskQueue任务队列：用于保存等待执行的任务的阻塞队列，可以选择以下几个阻塞队列：
	ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按fifo原则对元素进行排序。
	LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按fifo排序元素，吞吐量要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool
	()使用了这个队列。
	SynchronousQueue：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移出操作，否则插入操作一直处于阻塞状态，吞吐量高于LinkedBlockingQueue，
	静态工厂方法Executors.newCachedThreadPool使用了这个队列。
	PriorityBlockingPool：一个具有优先级的无界阻塞队列。

	3、maximumPoolSize线程池最大数量：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会创建新的线程执行任务。值得注意的
	是，如果使用了无界的任务队列这个参数就没用了。

	4、ThreadFactory：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。

	5、RejectExecutionHandle饱和策略：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是
	AbortPolicy，表示无法处理新任务时抛出异常。
	AbortPolicy：直接抛出异常。
	CallerRunsPolicy：只用调用者所在的线程来运行任务。
	DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。
	DiscardPolicy：不处理，丢弃掉。
	当然，也可以根据应用场景需要来实现RejectExecutionHandle接口。

	6、keepAliveTime线程活动保持时间：线程池的工作线程空闲后，保持存活的时间。所以，如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用
	率。

	7、TimeUnit线程活动保持时间的单位。