重写同步器指定的方法时，需要使用同步器提供的如下3个方法来访问或修改同步状态：
	1、getState()：获取当前同步状态
	2、setState(int newState)：设置当前同步状态
	3、compareAndSetState(int expect, int update)：使用cas设置当前状态，该方法能够保证状态设置的原子性

同步器可重写的方法：
	1、boolean tryAcquire(int arg)：独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再进行cas设置同步状态
	2、boolean tryRelease(int arg)：独占式释放同步状态，等待获取同步状态的线程将有机会获取同步状态
	3、boolean tryAcquireShared(int arg)：共享式获取同步状态，返回大于等于0的值，表示获取成功，返回，获取失败
	4、boolean tryReleaseShared(int arg)：共享式释放同步状态
	5、boolean isHeldExclusively()：当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占

实现自定义同步组件时，将会调用同步器提供的模板方法，同步器提供的模板：
	1、void acquire(int arg)：独占式获取同步状态，如果当前线程获取同步状态成功，则由该方法返回，否则，将会进入同步队列等待，该方法将会调用重写的
	tryAcquire(int arg)方法
	2、void acquireInterruptibly(int arg)：与acquire(int arg)相同，但是该方法响应中断，当前线程未获取到同步状态而进入同步队列中，如果当前线程被
	中断，则该方法会抛出interruptdException并返回
	3、boolean tryAcquireNanos(int arg, long nanos)：在acquireInterruptibly(int arg)基础上增加了超时限制，如果当前线程在超时时间内没有获取
	到同步状态，那么将会返回false，如果获取到了返回true
	4、void acquireShared(int age)：共享式获取同步状态，如果当前线程未获取到同步状态，将会进入同步队列等待，与独占式获取的主要区别是在同一时刻可以有
	多个线程获取到同步状态
	5、void acquireSharedInterruptibly(int age)：与acquireShared(int age)相同，该方法响应中断
	6、boolean tryAcquireSharedNanos(int arg, long nanos)：在acquireSharedInterruptibly(int age)基础上增加了超时限制
	7、Boolean release(int arg)：独占式的释放同步状态，该方法会在释放同步状态之后，将同步队列中第一个节点包含的线程唤醒
	8、Boolean releaseShared(int arg)：共享式的释放同步状态
	9、Collection<Thread> getQueuedThreads()：获取等待在同步队列上的线程集合