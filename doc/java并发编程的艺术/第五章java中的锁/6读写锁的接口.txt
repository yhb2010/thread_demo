int getReadLockCount()：返回当前读锁被获取的次数，该次数不等于获取读锁的线程数，例如，仅一个线程，他连续获取了n次读锁，那么占据的线程数是1，
但该方法返回n。
int getReadHoldCount()：返回当前线程获取读锁的次数。该方法在java6中加入到ReentrantReadWriteLock中，使用ThreadLocal保存当前线程获取
的次数。
boolean isWriteLocked()：判断写锁是否被获取。
int getWriteHoldCount()：返回当前写锁被获取的次数。

读写锁使用场景：
	1、主要用于读多写少的场景，用来替代传统的同步锁，以提升并发访问性能
	2、读写锁是可重入、可降级的，一个线程获取读写锁后，可以继续递归获取；从写锁可以降级为读锁，以便快速释放锁资源
	3、ReentrantReadWriteLock支持获取锁的公平策略，在某些特殊应用下，可以提升并发访问的性能，同时兼顾线程等待公平性
	4、读写锁支持非阻塞的尝试获取锁，如果获取失败，直接返回false，而不是同步阻塞。这个功能很有用，例如多个线程同步读写某个资源，当发生异常或者需要
	释放资源的时候，由哪个线程释放是个难题，因为某些资源不能重复释放或者重复执行，这样，可以通过tryLock方法尝试获取锁，如果拿不到，说明已经被其它
	线程占用，直接退出即可
	5、获取锁之后一定要释放锁，否则会发生锁溢出异常。通常的做法是通过finally块释放锁。如果是tryLock，获取锁成功才需要释放锁