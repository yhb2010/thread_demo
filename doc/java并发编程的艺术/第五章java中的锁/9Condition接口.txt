任意一个java对象，都拥有一组监视器方法，主要包括wait()，wait(long timeout)，notify()，notifyAll()方法，这些方法与synchronized同步
关键字配合，可以实现等待/通知模式。Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式，但是这两者在使用方式以及
功能特性上还是有差别的。

Condition方法及描述：
	1、void await()：当前线程进入等待状态直到被通知(signal)或中断，当前线程将进入运行状态且从await()方法返回的情况，包括：
	其他线程调用该condition的signal或signalAll方法，而当前线程被选中唤醒
	其它线程（调用interrupt方法）中断当前线程
	如果当前等待线程从await方法返回，那么表明该线程已经获取了condition对象锁对应的锁
	2、void awaitUninterruptibly()：当前线程进入等待状态直到被通知，从方法名上可以看出该方法对中断不敏感
	3、long awaitNanos(long nanosTimeout)：当前线程进入等待状态直到被通知，中断或者超时。返回值表示剩余的时间，如果在nanosTimeout纳秒之前被唤醒，那么
	返回值就是(nanosTimeout-实际耗时)。如果返回值是0或者负数，那么可以认定已经超时
	4、boolean awaitUntil(Date deadline)：当前线程进入等待状态直到被通知、中断或者到某个时间。如果没有到指定时间就被通知，方法返回true，否则，表示到了
	指定时间，方法返回false
	5、void signal()：唤醒一个等待在Condition上的线程，该线程从等待方法返回前必须获得与Condition相关联的锁
	6、void signalAll()：唤醒所有等待在Condition上的线程，能够从等待方法返回的线程必须获得与Condition相关联的锁