int corePoolSize：线程池中线程数量。
	核心线程会一直存活，即使没有任务需要执行。
	当线程数小于核心线程数时，即使有线程空闲， 线程池也会优先创建新线程处理。
	设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭。
int maximumPoolSize：线程池中的最大线程数量。
	当线程数>=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务。
	当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常。
long keepAliveTime：当线程池线程数量超过corePoolSize时，多余的空闲线程的存活时间。
	当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize。
		如果allowCoreThreadTimeout=true，则会直到线程数量=0。
TimeUnit unit：存活时间单位
BlockingQueue<Runnable> workQueue：任务队列，被提交但尚未被执行的任务
threadFactory：线程工厂，用于创建线程，一般用默认的即可
RejectedExecutionHandle handle：拒绝策略，当任务太多来不及处理，如何拒绝任务

参数workQueue指被提交但未执行的任务队列，它是一个BlockingQueue接口的对象，仅用于存放Runnable对象。ThreadPoolExecutor的构造函
数分为几种BlockingQueue：
	直接提交的队列：由SynchronousQueue提供，他没有容量，每一个插入操作都要等待一个相应的删除操作，反之，每个删除操作都要等待对应的
	插入操作。使用SynchronousQueue提交的任务不会被真实的保存，而总是将新任务提交给线程执行，如果没有空闲线程，则尝试创建新的线程，
	如果线程数量已经达到最大值，则执行拒绝策略。因此使用SynchronousQueue队列，通常要将maximumPoolSize设置很大。
	有界的任务队列：使用ArrayBlockingQueue实现。构造方法需要指定容量参数。当使用有界队列时，若有新的任务需要执行，如果线程池的实际
	线程数小于corePoolSize，则会优先创建新的线程，若大于corePoolSize，则会将新任务加入等待队列。若等待队列已满，则无法加入，则在
	总线程数不大于maximumPoolSize的前提下，创建新的线程执行任务。若大于maximumPoolSize，则执行拒绝策略。可见，有界队列仅当在任务
	队列装满时，才能将线程数提升到corePoolSize以上，除非系统非常繁忙，否则确保核心线程数维持在corePoolSize.
	无界的任务队列：通过LinkedBlockingQueue实现。除非系统资源耗尽，否则无界队列不存在任务入队失败的情况。当有新的任务到来，系统的
	线程数小于corePoolSize时，生成新的线程，当系统线程数达到corePoolSize后，就会继续增加。若后续仍有新的任务加入，而又没有空闲的
	线程资源，则任务直接进入等待队列，若任务创建和处理的速度差异很大，无界队列会保持快速增长，直到耗尽系统内存。