在了解了ThredLocal的内部实现后，引出了一个问题：就是这些变量是维护在Thread类内部的（ThreadLocalMap定义所在类），这也意味着只要
线程不退出，对象的引用将一直存在。
因此，如果我们使用线程池，那就意味着当前线程未必会退出（比如固定大小线程池，线程总是存在）。如果这样，将一些大大的对象设置到
ThreadLocal中（他实际保存在线程持有的threadLocals Map内），可能会使系统出现内存泄露的可能（你设置了对象到ThreadLocal中，但是
不清理他，在你使用了几次之后，这个对象也就不再有用了，但他却无法被回收）。
此时，如果你希望及时回收对象，最好使用ThreadLocal.remove方法将这个变量移出。
每个线程内部都有一个名字为 threadLocals 的成员变量，该变量类型为 HashMap，其中 key 为我们定义的 ThreadLocal 变量的 this 引用，
value 则为我们 set 时候的值，每个线程的本地变量是存到线程自己的内存变量 threadLocals 里面的，如果当前线程一直不消失那么这些本地
变量会一直存到，所以可能会造成内存泄露，所以使用完毕后要记得调用 ThreadLocal 的 remove 方法删除对应线程的 threadLocals 中的本
地变量。