Selector 选择器
	选择器(Selector)提供了挑选可用状态Channel的能力，从而实现多路复用的I/O。我下面的例子将很好的解释选择器的优势：

	设想你在一个火车站(non-selector，非选择器场景)，有3个平台 (channels), 每个平台都有火车到达（buffer,缓冲）。每个平台上都有个管理员管理着到达
	的列车（worker thread，工作线程）。这是非选择器的场景。现在设想下选择器场景。有3个平台（channels），每个平台会有火车到达（缓冲），每个平台都
	有个指示器（比如一个响铃）指示着“火车到达”（selection key）。在这个场景下只有一个管理员就可以管理所有的3个平台。他只需查看指示器
	（selector.select()）来判断是否有火车到达然后去处理一下到达的列车。

	理解selector场景的优势很简单：一个单线程就可以实现多重任务处理的应用。除此之外，使用非阻塞选择器还能得到更多好处！设想火车管理员看着指示器时：
	他可以等待新的列车到达而不做其他事（使用selector.select()的阻塞模式）；也可以在等待新的列车到达时（非阻塞模式使用selector.selectNow()）去
	卖车票，这样selector就会返回null让线程执行其他代码逻辑。
