package com.cdeledu.thread.chapter8;import java.util.concurrent.CyclicBarrier;public class CyclicBarrierTest {	//如果把new CyclicBarrier(2)改为new CyclicBarrier(3)，则主线程和子线程会永远等待，因为没有第三个线程执行await方法，即没有第三个线程到达屏障，所以之前到达屏障的两个线程都不会继续执行。    static CyclicBarrier c = new CyclicBarrier(2);    public static void main(String[] args) {        new Thread(new Runnable() {            @Override            public void run() {                try {                    c.await();                } catch (Exception e) {                }                System.out.println(1);            }        }).start();        try {            c.await();        } catch (Exception e) {        }        System.out.println(2);    }}